$split-width: 100px;
.split-wrapper {
   .split {
      position: absolute;
      @include user-select(none);
      &.split-attention{
         .split-trigger{
            animation: pulse 1s infinite alternate;
         }
      }

      &.active {
         z-index: $zindex-modal;
         .split-trigger,
         .bottom-option-l,
         .bottom-option-r,
         .top-option-l,
         .top-option-r,
         .split-overlay{
            @include scale(1.2);
         }


         .bottom-option-r {
            @include translate($split-width/2, $split-width/2);
         }
         .bottom-option-l {
            @include translate(-$split-width/2, $split-width/2);
         }
         .top-option-r {
            @include translate($split-width/2, -$split-width/2);
         }
         .top-option-l {
            @include translate(-$split-width/2, -$split-width/2);
         }

      }
      .split-trigger{
         @include transition(all cubic-bezier(0.935, 0.000, 0.340, 1.330) 300ms);
         @include transition-timing-function(cubic-bezier(0.935, 0.000, 0.340, 1.330));
         @include transition-duration(300ms);
         .button-wrapper{
            .button-text{
               position: absolute;
               top: 37px;
               left: -2px;
            }
         }
      }


      .bottom-option-r,
      .bottom-option-l,
      .top-option-l,
      .top-option-r,
      .split-overlay-v,
      .split-overlay-h,
      .split-text{
         @include transition(all cubic-bezier(0.935, 0.000, 0.340, 1.330) 300ms);
         @include transition-timing-function(cubic-bezier(0.935, 0.000, 0.340, 1.330));
         @include transition-duration(300ms);
         @include scale(0.001);
         position: absolute;
         margin: auto;
         top: 0;
         bottom: 0;
         right: 0;
         left: 0;
         z-index: $zindex-highest;
      }
      .bottom-option-r,
      .bottom-option-l,
      .top-option-l,
      .top-option-r{

         .button-wrapper{
            .button-text{

               position: absolute;
               top: 42px;
               font-weight: 700;
               left: -4px;
               text{
                  font-size: 0.8em !important;
                  text-transform: uppercase;
                  font-weight: 700 !important;
                  font-family: $headings-font-family;
                  padding: 2px 2px;
               }
            }
         }
      }
      .split-overlay-v{
         position: absolute;
         background: rgba(0,0,0,0.7);
         height: 150px;
         width: 200%;
         z-index: -1;
         float: left;
         left: -50px;
         top: 13px;
         border-radius: 5px;
      }

      .split-overlay-h{
         position: absolute;
         background: rgba(0, 0, 0, 0.7);
         height: 120px;
         width: 150px;
         z-index: -1;
         float: left;
         left: -50px;
         border-radius: 5px;
         top: 80px;
      }
   }
}




///////////////////////////////////////////////////////////
// Plain SASS Trigonometry Algorithm in Taylor Expansion //
//                                                       //
// Based on                                              //
//      http://japborst.net/posts/sass-sines-and-cosines //
///////////////////////////////////////////////////////////

$pi: 3.14159265359;
$_precision: 10;

@function pow($base, $exp) {
   $value: $base;
   @if $exp > 1 {
      @for $i from 2 through $exp {
         $value: $value * $base;
      }
   }
   @if $exp < 1{
      @for $i from 0 through -$exp {
         $value: $value / $base;
      }
   }
   @return $value;
}

@function fact($num) {
   $fact: 1;
   @if $num > 0{
      @for $i from 1 through $num {
         $fact: $fact * $i;
      }
   }
   @return $fact;
}

@function _to_unitless_rad($angle) {
   @if unit($angle) == "deg" {
      $angle: $angle / 180deg * $pi;
   }
   @if unit($angle) == "rad" {
      $angle: $angle / 1rad;
   }
   @return $angle;
}

@function sin($angle){
   $a: _to_unitless_rad($angle);
   $sin: $a;
   @for $n from 1 through $_precision {
      $sin: $sin + (pow(-1, $n) / fact(2 * $n + 1) ) * pow($a, (2 * $n + 1));
   }
   @return $sin;
}

@function cos($angle){
   $a: _to_unitless_rad($angle);
   $cos: 1;
   @for $n from 1 through $_precision {
      $cos: $cos + ( pow(-1,$n) / fact(2*$n) ) * pow($a,2*$n);
   }
   @return $cos;
}

@function tan($angle){
   @return sin($angle) / cos($angle);
}

//vars
$fg: $primary;
$pi:3.14;

//config
$split-menu-items:6+1;
$opening-angle:$pi*2;

%ball{
   width: 60px;
   height: 60px;
   position: absolute;
   bottom: 0px;
   text-align: center;
   transition: transform ease-out 200ms;
}
.split-menu-open{
   display:none;
}
.split-menu-item{
   @extend %ball;
   border: 1px solid $primary;
   // Scaling from 0.0 would result in a shitty animations
   @include translate3d(0px, 0px, 0px);
   @include scale(0.01,0.01);
}


.backpack {
   position: fixed;
   bottom: 0px;
   right: 0px;
   width: 50px;
   height:110px;
   z-index: $zindex-flyout;

}

.split-menu-items {
   @include user-select(none);
}
.split-menu-item{
   border: none !important;
   &:hover{
   }
   @for $i from 1 through $split-menu-items{
      &:nth-child(#{$i+2}){
         //@include transition(all cubic-bezier(0.935, 0.000, 0.340, 1.330) 180ms);
         @include transition(all ease-out 180ms);
         @include transition-duration(180ms);
      }
   }
}

.split-menu-open-button{
   @extend %ball;
   z-index:2;
   @include transition-duration(400ms);
   @include transition-timing-function(cubic-bezier(0.175, 0.885, 0.320, 1.275));
   @include translate3d(0px, 0px, 0px);
   @include scale(1,1);
   cursor:pointer;
   position: relative;
   top: 0;
}
.split-menu-open-button:hover{
   //transform:scale(1.2,1.2) translate3d(0,0,0);

}
.split-menu-open{
   &.active+.split-menu-open-button{
      @include transition-timing-function(linear);
      @include transition-duration(200ms);
      @include scale(0.8, 0.8);
      @include translate3d(0px, 0px, 0px);
   }
}

.split-menu-open{
   &.active~.split-menu-item{
      @include scale(1,1);
      @include translate3d(0px, 0px, 0px);
      @include transition(all cubic-bezier(0.935, 0.000, 0.340, 1.330) 400ms);
      @include transition-timing-function(cubic-bezier(0.165, 0.840, 0.440, 1.000));
      @include transition-duration(400ms);

   }
   $r-distance-md: 70px;


   &.radial-lt-md~.split-menu-item{
      @for $i from 1 through $split-menu-items{
         $angle:((-2*$pi + $opening-angle)/12)-(($opening-angle/($split-menu-items + 1))*($i + 1));
         //$angle:(($pi - $opening-angle)/2)+(($opening-angle/($split-menu-items - 1))*($i - 1));

         &:nth-child(#{$i+2}){
            @include transition-duration(80ms+(100ms*$i));
            @include translate3d(sin($angle)*$r-distance-md,cos($angle)*$r-distance-md,0);
         }
      }
   }


}
